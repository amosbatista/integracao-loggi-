{"version":3,"sources":["../../../src/api/login/service.js"],"names":["validate","login","password","service","Promise","resolve","reject","process","env","LOGGI_USER_LOGIN","LOGGI_USER_PASSWORD","message","httpReq","post","LOGGI_API_V2","query","end","err","response","data","resData","JSON","parse","text","apiId","user","apiKey","authData","Model"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,WAAW,SAAXA,QAAW,CAACC,KAAD,EAAQC,QAAR,EAAqB;AACpC,SAAOD,SAAS,EAAT,IAAeC,YAAY,EAAlC;AACD,CAFD;;AAIA,IAAMC,UAAU,SAAVA,OAAU,GAAM;;AAEpB,SAAO,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,QAAML,QAAQM,QAAQC,GAAR,CAAYC,gBAA1B;AACA,QAAMP,WAAWK,QAAQC,GAAR,CAAYE,mBAA7B;;AAEA,QAAG,CAACV,SAASC,KAAT,EAAgBC,QAAhB,CAAJ,EAA8B;AAC5BI,aAAO;AACLK,iBAAS;AADJ,OAAP;AAGD,KAJD,MAKK;AACHC,2BAAQC,IAAR,CAAaN,QAAQC,GAAR,CAAYM,YAAzB,EACCC,KADD,CACO,EAACA,OAAM,sCAAsCd,KAAtC,GAA8C,kBAA9C,GAAmEC,QAAnE,GAA8E,6BAArF,EADP,EAECc,GAFD,CAEK,UAACC,GAAD,EAAMC,QAAN,EAAmB;;AAEtB,YAAGD,GAAH,EAAO;AACLX,iBAAO;AACLK,qBAAS,6BADJ;AAELQ,kBAAMF;AAFD,WAAP;;AAKA;AACD;;AAED,YAAMG,UAAUC,KAAKC,KAAL,CAAWJ,SAASK,IAApB,CAAhB;;AAEA,YAAI;AACF,cAAMC,QAAQJ,QAAQD,IAAR,CAAalB,KAAb,CAAmBwB,IAAnB,CAAwBC,MAAtC;AACA,cAAMC,WAAW,IAAIC,eAAJ,CAAU3B,KAAV,EAAiBC,QAAjB,EAA2BsB,KAA3B,CAAjB;;AAEAnB,kBAAQsB,QAAR;AACD,SALD,CAMA,OAAMV,GAAN,EAAW;;AAETX,iBAAO;AACLK,qBAAS,sEADJ;AAELQ,kBAAMF;AAFD,WAAP;AAID;AACF,OA5BD;AA6BD;AACF,GAzCM,CAAP;AA0CD,CA5CD;;kBA8Ced,O","file":"service.js","sourcesContent":["import httpReq from 'superagent';\nimport Model from './model' \n\nconst validate = (login, password) => {\n  return login != '' && password != ''\n}\n\nconst service = () => {\n\n  return new Promise( (resolve, reject) => {\n\n    const login = process.env.LOGGI_USER_LOGIN\n    const password = process.env.LOGGI_USER_PASSWORD\n\n    if(!validate(login, password)){\n      reject({\n        message: 'Login or password is empty'\n      })\n    }\n    else {\n      httpReq.post(process.env.LOGGI_API_V2)\n      .query({query:'mutation { login(input:{email: \\\"' + login + '\\\", password: \\\"' + password + '\\\" }) { user { apiKey } } }'})\n      .end((err, response) => {\n\n        if(err){\n          reject({\n            message: 'Error in client API request',\n            data: err\n          })\n\n          return\n        }\n        \n        const resData = JSON.parse(response.text)\n\n        try {\n          const apiId = resData.data.login.user.apiKey\n          const authData = new Model(login, password, apiId)\n\n          resolve(authData)\n        }\n        catch(err) {\n\n          reject({\n            message: 'It was impossible to generate user key. Check your password or login',\n            data: err\n          })\n        }\n      })\n    }\n  })\n}\n\nexport default service"]}