{"version":3,"sources":["../../../../../src/api/purchase/approve/services/loggiApproved.js"],"names":["service","addressData","servicesData","paymentData","auth","Promise","resolve","reject","notariusStoreId","process","env","LOGGI_STORE_ID","paymentMethodAlreadyChaged","notariusAddress","lat","lng","completeAddress","complement","query","coordinates","addressComplement","clientName","clientPhone","deliveryTax","console","log","httpReq","post","LOGGI_API_V2","send","set","end","err","apiRes","message","data","body","createOrder","success","errors","shop","pk"],"mappings":";;;;;;AAAA;;;;;;AAEA;AACA;AACA;;AAEA,IAAMA,UAAU,SAAVA,OAAU,CAACC,WAAD,EAAcC,YAAd,EAA4BC,WAA5B,EAAyCC,IAAzC,EAAkD;;AAEhE,SAAO,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,QAAMC,kBAAkBC,QAAQC,GAAR,CAAYC,cAApC;AACA,QAAMC,6BAA6B,EAAnC;;AAEA,QAAMC,kBAAkB;AACtBC,WAAM,CAAC,UADe;AAEtBC,WAAK,CAAC,UAFgB;AAGtBC,uBAAiB,0EAHK;AAItBC,kBAAY;AAJU,KAAxB;;AAOA,QAAMC,qEAEQV,eAFR,sEAKUP,YAAYkB,WAAZ,CAAwBL,GALlC,2BAMUb,YAAYkB,WAAZ,CAAwBJ,GANlC,gCAOcd,YAAYe,eAP1B,oCAQiBf,YAAYmB,iBAR7B,+HAcWlB,aAAamB,UAdxB,+BAeYnB,aAAaoB,WAfzB,+DAkBST,gBAAgBC,GAlBzB,2BAmBSD,gBAAgBE,GAnBzB,gCAoBcF,gBAAgBG,eApB9B,oCAqBiBH,gBAAgBI,UArBjC,iEAwBYd,YAAYoB,WAxBxB,+BAyBYX,0BAzBZ,6vBAAN;;AAmEAY,YAAQC,GAAR,CAAYP,KAAZ;;AAEAQ,yBAAQC,IAAR,CAAalB,QAAQC,GAAR,CAAYkB,YAAzB,EACCC,IADD,CACM;AACJ,eAASX;AADL,KADN,EAICY,GAJD,CAIK,cAJL,EAIqB,kBAJrB,EAKCA,GALD,CAKK,eALL,EAKsB1B,IALtB,EAOC2B,GAPD,CAOK,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACpB,UAAGD,GAAH,EAAO;;AAELzB,eAAO;AACL2B,mBAAS,yCADJ;AAELC,gBAAMH;AAFD,SAAP;AAIA;AACD;;AAED,UAAG,CAACC,OAAOG,IAAP,CAAYD,IAAZ,CAAiBE,WAAjB,CAA6BC,OAAjC,EAA0C;;AAExC/B,eAAO;AACL2B,sFADK;AAELC,gBAAMF,OAAOG,IAAP,CAAYD,IAAZ,CAAiBE,WAAjB,CAA6BE;AAF9B,SAAP;AAIA;AACD;;AAEDjC,cAAQ;AACN,wBAAgB2B,OAAOG,IAAP,CAAYD,IAAZ,CAAiBE,WAAjB,CAA6BG,IAA7B,CAAkCC;AAD5C,OAAR;AAID,KA9BD;AA+BD,GAhHM,CAAP;AAiHD,CAnHD;;kBAqHezC,O","file":"loggiApproved.js","sourcesContent":["import httpReq from 'superagent'\n\n// {\n//   inquiryId: 0\n// }\n\nconst service = (addressData, servicesData, paymentData, auth) => {\n\n  return new Promise ((resolve, reject) => {\n\n    const notariusStoreId = process.env.LOGGI_STORE_ID\n    const paymentMethodAlreadyChaged = 64\n\n    const notariusAddress = {\n      lat:  -23.5857434,\n      lng: -46.6785174,\n      completeAddress: 'R. Joaquim Floriano, 889 - Itaim Bibi, SÃ£o Paulo - SP, 04534-011, Brazil',\n      complement: \"\"\n    }\n\n    const query = `mutation {\n      createOrder(input: {\n        shopId: ${notariusStoreId}\n        pickups: [{\n          address: {\n            lat: ${ addressData.coordinates.lat}\n            lng: ${ addressData.coordinates.lng}\n            address: \"${addressData.completeAddress}\"\n            complement: \"${addressData.addressComplement}\"\n          }\n        }]\n        packages: [{\n          pickupIndex: 0\n          recipient: {\n            name: \"${servicesData.clientName}\"\n            phone: \"${servicesData.clientPhone}\"\n          }\n          address: {\n            lat: ${notariusAddress.lat}\n            lng: ${notariusAddress.lng}\n            address: \"${notariusAddress.completeAddress}\"\n            complement: \"${notariusAddress.complement}\"\n          }\n          charge: {\n            value: \"${paymentData.deliveryTax}\"\n            method: ${paymentMethodAlreadyChaged}\n            change: \"0.00\"\n          }\n          dimensions: {\n            width: 10\n            height: 10\n            length: 10\n          }\n        }]\n      }) {\n        success\n        shop {\n          pk\n          name\n          order {\n            pk\n            packages {\n              pk\n              status\n              pickupWaypoint {\n                index\n                indexDisplay\n                eta\n                legDistance\n              }\n              waypoint {\n                index\n                indexDisplay\n                eta\n                legDistance\n              }\n            }\n          }\n        }\n        errors {\n          field\n          message\n        }\n      }\n    }\n    `\n\n    console.log(query)\n    \n    httpReq.post(process.env.LOGGI_API_V2)\n    .send({\n      \"query\": query\n    })\n    .set('Content-Type', \"application/json\")\n    .set('authorization', auth)\n\n    .end((err, apiRes) => {\n      if(err){\n\n        reject({\n          message: \"Error at Loggi's API order confirmation\",\n          data: err\n        })\n        return\n      }\n      \n      if(!apiRes.body.data.createOrder.success) {\n\n        reject({\n          message: `The Loggi's order confirmation has response, but returned errors`,\n          data: apiRes.body.data.createOrder.errors\n        })\n        return\n      }\n\n      resolve({\n        \"loggiOrderId\": apiRes.body.data.createOrder.shop.pk\n      })\n\n    })\n  })\n}\n\nexport default service"]}