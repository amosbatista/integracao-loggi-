{"version":3,"sources":["../../../../../src/api/purchase/approve/services/log.js"],"names":["service","maxConnections","minConnections","idleSecondsBeforeClose","sequelize","Sequelize","process","env","LOG_DATABASE","LOG_LOGIN","LOG_PASSWORD","host","LOG_HOST","dialect","LOG_DATABASE_TYPE","pool","max","min","idle","transactionLog","define","clientName","type","STRING","clientEmail","clientPhone","completeAddress","allowNull","addressComplement","totalPurchase","DECIMAL","deliveryTax","servicesSum","transactionOperationTax","creditCardNumberFromAPI","creditCardBrand","creditCardHolder","creditCardProofOfSale","creditCardTid","creditCardAuthorizationCode","creditCardPaymentId","creditCardLinksData","TEXT","transactionData","Promise","resolve","reject","sync","then","create","creditCard","numberFromAPI","brand","holder","proofOfSale","tid","authorizationCode","paymentId","JSON","stringify","linksData","catch","err","message","data"],"mappings":"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","file":"log.js","sourcesContent":["import Sequelize from 'sequelize'\n// {\n//   clientName, address, number, neighborhood, totalPurchase, \n//   creditCardData: {\n//     numberFromAPI, brand, holder,proofOfSale, tid, authorizationCode, paymentId, linksData \n//   }\n// }\n\nconst service = class {\n\n  constructor () {\n\n    const maxConnections = 5\n    const minConnections = 1\n    const idleSecondsBeforeClose = 10000\n    \n    this.sequelize = new Sequelize(process.env.LOG_DATABASE, process.env.LOG_LOGIN, process.env.LOG_PASSWORD, {\n      host: process.env.LOG_HOST,\n      dialect: process.env.LOG_DATABASE_TYPE,\n    \n      pool: {\n        max: maxConnections,\n        min: minConnections,\n        idle: idleSecondsBeforeClose\n      }\n    })\n\n    this.transactionLog = this.sequelize.define('transactionLog', {\n      clientName: {\n        type: Sequelize.STRING\n      },\n      clientEmail: {\n        type: Sequelize.STRING\n      },\n      clientPhone: {\n        type: Sequelize.STRING\n      },\n      completeAddress: {\n        type: Sequelize.STRING,\n        allowNull: true\n      },\n      addressComplement: {\n        type: Sequelize.STRING\n      },\n      totalPurchase: {\n        type: Sequelize.DECIMAL\n      },\n      deliveryTax: {\n        type: Sequelize.DECIMAL\n      },\n      servicesSum: {\n        type: Sequelize.DECIMAL\n      },\n      transactionOperationTax: {\n        type: Sequelize.DECIMAL\n      },\n      creditCardNumberFromAPI:{\n        type: Sequelize.STRING\n      },\n      creditCardBrand:{\n        type: Sequelize.STRING\n      },\n      creditCardHolder:{\n        type: Sequelize.STRING\n      },\n      creditCardProofOfSale:{\n        type: Sequelize.STRING\n      },\n      creditCardTid:{\n        type: Sequelize.STRING\n      },\n      creditCardAuthorizationCode:{\n        type: Sequelize.STRING\n      },\n      creditCardPaymentId:{\n        type: Sequelize.STRING\n      },\n      creditCardLinksData:{\n        type: Sequelize.TEXT\n      }\n    })\n  }\n\n  save(transactionData) {\n    return new Promise((resolve, reject)=> {\n      let transactionLog = this.transactionLog\n      \n      transactionLog.sync().then( () => {\n        transactionLog.create({\n          clientName: transactionData.clientName,\n          clientEmail: transactionData.clientEmail,\n          clientPhone: transactionData.clientPhone,\n          completeAddress: transactionData.completeAddress,\n          addressComplement: transactionData.addressComplement,\n          totalPurchase: transactionData.totalPurchase,\n          servicesSum: transactionData.servicesSum,\n          deliveryTax: transactionData.deliveryTax,\n          transactionOperationTax: transactionData.transactionOperationTax,\n          creditCardNumberFromAPI: transactionData.creditCard.numberFromAPI,\n          creditCardBrand: transactionData.creditCard.brand,\n          creditCardHolder: transactionData.creditCard.holder,\n          creditCardProofOfSale: transactionData.creditCard.proofOfSale,\n          creditCardTid: transactionData.creditCard.tid,\n          creditCardAuthorizationCode: transactionData.creditCard.authorizationCode,\n          creditCardPaymentId: transactionData.creditCard.paymentId,\n          creditCardLinksData: JSON.stringify(transactionData.creditCard.linksData)\n        })\n        .then(()=>{\n          resolve()\n        })\n        .catch((err)=>{\n          reject({\n            message: 'Error at log into database',\n            data: err\n          })\n        })\n      })\n    })\n    \n  }\n}\n\nexport default service"]}