{"version":3,"sources":["../../../../src/api/purchase/approve/index.js"],"names":["config","db","api","post","req","res","STATUS_UNAUTHORIZED","STATUS_SERVER_ERROR","console","log","then","authData","body","paymentData","creditCardReturnData","addressData","servicesData","toString","loggiData","Log","save","clientName","clientEmail","clientPhone","completeAddress","addressComplement","totalPurchase","totalAmount","deliveryTax","servicesSum","transactionOperationTax","calculedValue","creditCard","numberFromAPI","Payment","CreditCard","CardNumber","brand","Brand","holder","Holder","proofOfSale","ProofOfSale","tid","Tid","authorizationCode","AuthorizationCode","paymentId","PaymentId","linksData","Links","json","isProcessOk","loggiOrderId","end","catch","err","message","data","Promise","all","status","send"],"mappings":"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","file":"index.js","sourcesContent":["import { Router } from 'express'\nimport authService from '../../login/service'\n\nimport cieloCancelation from './services/cieloCancelation'\nimport cieloTransaction from './services/cieloTransaction'\nimport loggiApproved from './services/loggiApproved'\nimport loggiCancelation from './services/loggiCancelation'\nimport Log from './services/log'\n\nexport default ({ config, db }) => {\n\tlet api = Router();\n\n\t// perhaps expose some API metadata at the root\n\tapi.post('/', (req, res) => {\n    const STATUS_UNAUTHORIZED = 401\n    const STATUS_SERVER_ERROR = 500\n\n    console.log('Start of transaction process')\n    console.log(\"On Loggi's auth\")\n\n    authService().then( (authData) => {\n\n      console.log(\"On Credit Card operator process\")\n      cieloTransaction(req.body.paymentData)\n\n      .then((creditCardReturnData)=>{\n\n        console.log(\"On Loggi's order approvation\")\n        loggiApproved(req.body.addressData, req.body.servicesData, req.body.paymentData, authData.toString())\n\n        .then((loggiData) => {\n\n          console.log(\"After transaction finish, on log process\")\n          const log = new Log()\n          \n          log.save({\n            clientName: req.body.servicesData.clientName,\n            clientEmail: req.body.servicesData.clientEmail,\n            clientPhone: req.body.servicesData.clientPhone,\n            completeAddress: req.body.addressData.completeAddress,\n            addressComplement: req.body.addressData.addressComplement,\n            totalPurchase: req.body.paymentData.totalAmount,\n            deliveryTax: req.body.paymentData.deliveryTax,\n            servicesSum: req.body.paymentData.servicesSum,\n            transactionOperationTax: req.body.paymentData.transactionOperationTax.calculedValue,\n            creditCard: {\n              numberFromAPI: creditCardReturnData.Payment.CreditCard.CardNumber,\n              brand: creditCardReturnData.Payment.CreditCard.Brand,\n              holder: creditCardReturnData.Payment.CreditCard.Holder,\n              proofOfSale: creditCardReturnData.Payment.ProofOfSale,\n              tid: creditCardReturnData.Payment.Tid,\n              authorizationCode: creditCardReturnData.Payment.AuthorizationCode,\n              paymentId: creditCardReturnData.Payment.PaymentId,\n              linksData: creditCardReturnData.Payment.Links\n            }\n          })\n          \n          .then( () => {\n            \n            res.json({\n              isProcessOk: true,\n              loggiOrderId: loggiData.loggiOrderId,\n              paymentId: creditCardReturnData.Payment.PaymentId\n            })\n            res.end()\n           \n          })\n\n          .catch( (err) => {\n            console.log(err.message, err.data)\n\n            console.log(\"Trying to rollback transactions, after database failure.\")\n            Promise.all([\n              cieloCancelation(creditCardReturnData.Payment.PaymentId, req.body.paymentData.totalAmount),\n              loggiCancelation(loggiData.loggiOrderId, authData.toString())\n            ])\n\n            .then(() => {\n              res.status(STATUS_SERVER_ERROR).send(err.message)\n              res.end()\n            })\n\n            .catch( (err) => {\n              console.log(err.message, err.data)\n              res.status(STATUS_SERVER_ERROR).send(err.message)\n              res.end()\n            })\n\n          })\n        })\n\n        .catch((err) => {\n          console.log(err.message, err.data)\n          cieloCancelation(creditCardReturnData.Payment.PaymentId, req.body.paymentData.totalAmount)\n\n          .then(() => {\n            res.status(STATUS_SERVER_ERROR).send(err.message)\n            res.end()\n          })\n\n          .catch( (err) => {\n            console.log(err.message, err.data)\n            res.status(STATUS_SERVER_ERROR).send(err.message)\n            res.end()\n          })\n\n        })\n\n      })\n\n      .catch((err)=>{\n        console.log(err.message, err.data)\n        res.status(STATUS_SERVER_ERROR).send(err.message)\n        res.end()\n      })\n      \n    })\n\n    .catch( (err) => {\n      console.log('Unauthorized atempt to conclude order', err)\n      res.status(STATUS_UNAUTHORIZED).send(err.message)\n      res.end()\n    })\n\n\t});\n\n\treturn api;\n}\n"]}