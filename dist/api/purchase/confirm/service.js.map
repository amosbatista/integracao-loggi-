{"version":3,"sources":["../../../../src/api/purchase/confirm/service.js"],"names":["service","addressData","auth","Promise","resolve","reject","notariusStoreId","process","env","LOGGI_STORE_ID","originCoordinate","coordinates","query","lat","lng","httpReq","post","LOGGI_API_V2","send","set","end","err","apiRes","message","object","JSON","stringify","firstPackage","body","data","estimate","packages","error","outOfCityCover","outOfCoverageArea","estimatedCost","rideCm"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,UAAU,SAAVA,OAAU,CAACC,WAAD,EAAcC,IAAd,EAAuB;;AAErC,SAAO,IAAIC,OAAJ,CAAc,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAExC,QAAMC,kBAAkBC,QAAQC,GAAR,CAAYC,cAApC;AACA,QAAMC,mBAAmBT,YAAYU,WAArC;;AAEA,QAAMC,uDAEQN,eAFR,yEAKSI,iBAAiBG,GAL1B,4BAMSH,iBAAiBI,GAN1B,olBAAN;;AAyCAC,yBAAQC,IAAR,CAAaT,QAAQC,GAAR,CAAYS,YAAzB,EACCC,IADD,CACM;AACJN,aAAOA;AADH,KADN,EAICO,GAJD,CAIK,eAJL,EAIsBjB,IAJtB,EAKCiB,GALD,CAKK,cALL,EAKqB,kBALrB,EAMCC,GAND,CAMK,UAACC,GAAD,EAAMC,MAAN,EAAiB;;AAEpB,UAAGD,GAAH,EAAO;AACLhB,eAAO;AACLkB,mBAAS,6BADJ;AAELC,kBAAQC,KAAKC,SAAL,CAAeL,GAAf;AAFH,SAAP;;AAKA;AACD;;AAED,UAAMM,eAAe,CAArB;;AAEA,UAAGL,OAAOM,IAAP,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0BC,QAA1B,CAAmCJ,YAAnC,EAAiDK,KAApD,EAA0D;AACxD3B,eAAO;AACLkB,mBAAS,yCADJ;AAELC,kBAAQC,KAAKC,SAAL,CAAeJ,OAAOM,IAAP,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0BC,QAA1B,CAAmCJ,YAAnC,EAAiDK,KAAhE;AAFH,SAAP;;AAKA;AACD;;AAED,UAAGV,OAAOM,IAAP,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0BC,QAA1B,CAAmCJ,YAAnC,EAAiDM,cAApD,EAAmE;AACjE5B,eAAO;AACLkB,mBAAS,4CADJ;AAELC,kBAAQ;AAFH,SAAP;;AAKA;AACD;;AAED,UAAGF,OAAOM,IAAP,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0BC,QAA1B,CAAmCJ,YAAnC,EAAiDO,iBAApD,EAAsE;AACpE7B,eAAO;AACLkB,mBAAS,uCADJ;AAELC,kBAAQ;AAFH,SAAP;;AAKA;AACD;;AAEDpB,cAAQ;AACN+B,uBAAcb,OAAOM,IAAP,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0BC,QAA1B,CAAmCJ,YAAnC,EAAiDS;AADzD,OAAR;AAID,KAlDD;AAmDD,GAjGM,CAAP;AAkGD,CApGD;;kBAsGepC,O","file":"service.js","sourcesContent":["import httpReq from 'superagent'\n\nconst service = (addressData, auth) => {\n\n  return new Promise ( (resolve, reject) => {\n\n    const notariusStoreId = process.env.LOGGI_STORE_ID\n    const originCoordinate = addressData.coordinates\n\n    const query = `query {\n      estimate(\n        shopId: ${notariusStoreId},\n        packagesDestination: [\n          {\n            lat: ${originCoordinate.lat},\n            lng: ${originCoordinate.lng}   \n          }\n        ]\n        chargeMethod: 1,\n        optimize: true\n      ) {\n        packages {\n          error\n          eta\n          index\n          rideCm\n          outOfCityCover\n          outOfCoverageArea\n          originalIndex\n          waypoint {\n            indexDisplay\n            originalIndexDisplay\n            role\n          }\n        }\n        routeOptimized\n        normal {\n          cost\n          distance\n          eta\n        }\n        optimized {\n          cost\n          distance\n          eta\n        }\n      }   \n    }\n    `\n\n    httpReq.post(process.env.LOGGI_API_V2)\n    .send({\n      query: query\n    })\n    .set('Authorization', auth)\n    .set('Content-Type', 'application/json')\n    .end((err, apiRes) => {\n      \n      if(err){\n        reject({\n          message: 'Error in client API request',\n          object: JSON.stringify(err)\n        })\n\n        return\n      }\n\n      const firstPackage = 0\n      \n      if(apiRes.body.data.estimate.packages[firstPackage].error){\n        reject({\n          message: 'API request is done but there\"s errors ',\n          object: JSON.stringify(apiRes.body.data.estimate.packages[firstPackage].error)\n        })\n\n        return\n      }\n\n      if(apiRes.body.data.estimate.packages[firstPackage].outOfCityCover){\n        reject({\n          message: 'Delivery request is so far from SÃ£o Paulo.',\n          object: \"\"\n        })\n\n        return\n      }\n\n      if(apiRes.body.data.estimate.packages[firstPackage].outOfCoverageArea){\n        reject({\n          message: 'Delivery request is so far from Loggi',\n          object: \"\"\n        })\n\n        return\n      }\n      \n      resolve({\n        estimatedCost:apiRes.body.data.estimate.packages[firstPackage].rideCm\n      })\n      \n    })\n  })\n}\n\nexport default service"]}